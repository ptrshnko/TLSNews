name: TLScontact Slot Monitor

on:
  schedule:
    - cron: '*/10 * * * *'           # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
  workflow_dispatch:                # —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∏–∑ UI

jobs:
  monitor:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo üõéÔ∏è
        uses: actions/checkout@v3     # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–æ–Ω–∏—Ä—É–µ—Ç –∫–æ–¥ :contentReference[oaicite:0]{index=0}

      - name: Cache state file üíæ
        uses: actions/cache@v3        # –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è :contentReference[oaicite:1]{index=1}
        id: cache-state
        with:
          path: last_release.txt      # —á—Ç–æ –∫—ç—à–∏—Ä—É–µ–º
          key: state-${{ runner.os }}-${{ hashFiles('check_slots.py') }}
          restore-keys: |
            state-${{ runner.os }}-   # fallback –Ω–∞ –ª—é–±–æ–π state –¥–ª—è —ç—Ç–æ–π –û–°

      - name: Set up Python üêç
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'       # –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä :contentReference[oaicite:2]{index=2}

      - name: Install dependencies üì¶
        run: pip install -r requirements.txt

      - name: Run slot monitor ‚è±Ô∏è
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: python check_slots.py

      - name: Save updated state ‚öôÔ∏è
        if: steps.cache-state.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v3
        with:
          name: last-release
          path: last_release.txt
